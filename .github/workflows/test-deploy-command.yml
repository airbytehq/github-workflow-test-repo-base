name: Deploy Helm Chart to GKE Cluster

on:
  workflow_dispatch:
    inputs:
      env_name:
        description: "Environment Name:"
        type: choice
        required: true
        options:
          - infra-dev
          - dev
          - dev-1
          - dev-2
          - dev-3
          - frontend-dev
          - stage
          - prod
        default: "infra-dev"
      oss_reference:
        description: "Airbyte OSS Reference (branch or tag):"
        required: false
        default: ""
      cloud_version:
        description: "Airbyte Cloud Version (Git Hash of HEAD):"
        default: ""
        required: false
      log_level:
        description: "Log level the app should be deployed at:"
        required: false
        type: choice
        options:
         - TRACE
         - DEBUG
         - INFO
         - WARNING
         - ERROR
         - CRITICAL
         - FATAL
        default: "INFO"
      run_type:
        description: "Deployment type:"
        type: choice
        required: true
        options:
          - dry            # -- just simulate deployment and show generated K8s manifest
          - deploy         # -- simple deployment with automatic recovery in case of failure (common case) 
          - no-rollback    # -- no-rollback -- deployment without possibility to rollback (please be careful with that option)
        default: "dry"
        
      # Due to the limit of 10 input parameters in the workflow, as well as to simplify the transfer of parameters, a parameter in JSON format was introduced, which is essentially a collection of parameters.
      # We can pass tags of all components, as well as the majority of the general parameters via this parameter. The only exception is the "env_name" parameter, as this is a key parameter, and it makes sense to set it separately.
      # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      hjson:
        description: 'Parameters in HJSON format:'  # For example: { oss: OSS_Version, ossbranch: dev/some-branch, cloud: Cloud_Version, server: aabbccd, cloud-server: eeffaab, log: error, run: deploy }
        required: false
      
      comment-id:
        description: 'The "comment-id" of the slash command'  # Used to update the comment with the status.
        required: false
      # https://github.com/airbytehq/airbyte-cloud/issues/1891
      # build_images:
      #   description: "Build and Push Images"
      #   # Only relevant when deploying from non-master branches. We don't want to push for master since the main cloud build already pushes images."
      #   type: boolean
      #   required: true
      #   default: True
      endpoints:
        description: "Update GCP Endpoints Configs"
        type: boolean
        required: false
        default: true
      tests:
        description: "Run Integration Tests"
        type: boolean
        required: true
        default: true
      gsm:
        description: "Run Secrets Management (GSM,GKE)"
        type: boolean
        required: false
        default: false
        
  workflow_call:
    inputs:
      env_name:
        type: string
        required: true
      oss_reference:
        type: string
        required: false
      cloud_version:
        type: string
        required: false
      log_level:
        required: false
        type: string
        default: "INFO"
      run_type:
        type: string
        required: true
        default: "dry"

      hjson:
        type: string
        required: false
      
      comment-id:
        type: string
        required: false
      endpoints:
        type: boolean
        required: false
        default: true
      tests:
        type: boolean
        required: true
        default: true
      gsm:
        type: boolean
        required: false
        default: false

#
# More information about the deployment process can be found here:
#     https://github.com/airbytehq/airbyte-cloud/wiki/One-Click-Deploy-(Github-Actions)
#

jobs:
  set-oss-and-cloud-version-vars:
    runs-on: ubuntu-latest
    name: "Set OSS & cloud version vars:"
    outputs:
      oss_reference: ${{ steps.set-outputs.outputs.oss_reference }}
      cloud_version: ${{ steps.set-outputs.outputs.cloud_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Checking input params 
        run: |-
          echo -e "
                          Checking if params were passed via workflow_call:
                          
                          Trigger: ${{ github.event_name }}
                          
                          env_name: ${{ inputs.env_name }}
                          oss_reference: ${{ inputs.oss_reference }}
                          cloud_version: ${{ inputs.cloud_version }}
                          log_level: ${{ inputs.log_level}}
                          run_type: ${{ inputs.run_type }}
                          hjson: ${{ inputs.hjson }}
                          endpoints:: ${{ inputs.endpoints }}
                          tests_integration: ${{ inputs.tests }}
                          gsm_integration: ${{ inputs.gsm }}          
          "
          
      - name: Set Outputs
        id: set-outputs
        run: |-
          set -o xtrace
          
          #--------------------------------------------------------------------
          # Set oss_version and oss_branch_ref vars based on inputs
          #--------------------------------------------------------------------
          
          # If oss_version input, assume it is an official release with a corresponding tag that should be used as the oss_branch
          if test -n "${{ inputs.oss_reference }}"
          then
            ossRef="v${{ inputs.oss_reference}}"
          
          # Else if oss_branch input, set oss_version to the generated oss_branch tag, and set the output oss_branch_ref to the input oss_branch directly 
          fi
          echo "::set-output name=oss_reference::$ossRef"
          echo "::set-output name=cloud_version::$cloudVersion"
          
          echo "
                   oss_reference: $ossRef 
                   cloud_version: $cloudVersion
          "
  parsing-input-params:
    runs-on: ubuntu-latest
    name: Parsing input params
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2
    
      - name: Parsing Inputs and set Variables
        id: input-and-variables
        run: |-
          set -e
          case "${{ inputs.env_name }}" in
              infra-dev|dev|dev-1|dev-2|dev-3|frontend-dev)
                  GCP_SA_KEY="DEV_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::false";;
              stage)
                  GCP_SA_KEY="STAGE_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::true";;
              prod)
                  GCP_SA_KEY="PROD_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::true";;
              *)
                  echo "*** Unexpected env_name: ${{ inputs.env_name }} ***"; exit 1
              esac
          echo "::set-output name=gcp_sa_key::${GCP_SA_KEY}"
          [[ "${{ inputs.run_type }}" == "dry" ]] && echo "::set-output name=dry_run::true" || echo "::set-output name=dry_run::false"
          
      - name: Helm Chart is being deployed to GKE Cluster and GCP Endpoints Configs are being uppdated
        id: deploy
        uses: ./.github/actions/test-deploy
        with:
          env_name: ${{ inputs.env_name }}
          oss_branch_ref: ${{ needs.set-oss-and-cloud-version-vars.outputs.oss_reference }}
          cloud_version: ${{ needs.set-oss-and-cloud-version-vars.outputs.cloud_version }}
          run_type: ${{ inputs.run_type }}
          json: ${{ inputs.json }}
          build_images: true
          gcp_sa_key: ${{ steps.input-and-variables.outputs.gcp_sa_key }}
          # dockerhub_token: ${{ secrets.DOCKER_TOKEN }}
          gsm_integration: ${{ inputs.gsm }}
          # lastpass_token: ${{ secrets.LASTPASS_TOKEN }}
          slackbot_token: ${{ secrets.SLACK_BOT_TOKEN_AIRBYTE_TEAM }}
