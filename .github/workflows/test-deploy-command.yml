name: Deploy Helm Chart to GKE Cluster

on:
  workflow_dispatch:
    inputs:
      env_name:
        description: "Environment Name (infra-dev, dev, dev-1, dev-2, dev-3, frontend-dev, stage, prod)"
        required: true
        default: "infra-dev"
      oss_branch:
        description: "OSS Branch Name (optional -- use instead of Airbyte OSS Version if deploying a particular OSS branch)"
        required: false
      oss_version:
        description: "Airbyte OSS Version (optional -- defaults to AIRBYTE_VERSION in .env. Do not use if using OSS Branch Name instead)"
        required: false
      cloud_version:
        description: "Airbyte Cloud Version (optional -- defaults to Git Hash of HEAD)"
        required: false
      # Due to the limit of 10 input parameters in the workflow, log_level is being removed in favor of oss_branch. This can still be specified in the json input
      # log_level:
      #   description: "Log level the app should be deployed at (optional -- defaults to INFO) (FATAL, CRITICAL, ERROR, WARN, WARNING, INFO, DEBUG, TRACE) (case insensitive)"
      #   required: false
      #   default: "INFO"
      run_type:
        description: "Deployment type. Possible options: dry -- just simulate deployment and show generated K8s manifest | deploy -- simple deployment with automatic recovery in case of failure (common case) | no-rollback -- deployment without possibility to rollback (please be careful with that option)"
        required: true
        default: "dry"
      # Due to the limit of 10 input parameters in the workflow, as well as to simplify the transfer of parameters, a parameter in JSON format was introduced, which is essentially a collection of parameters.
      # We can pass tags of all components, as well as the majority of the general parameters via this parameter. The only exception is the "env_name" parameter, as this is a key parameter, and it makes sense to set it separately.
      json:
        description: 'Parameters in JSON format. For example: { "oss": "OSS Version", "ossbranch": "dev/some-branch", "cloud": "Cloud Version", "server": "aabbccd", "cloud-server": "eeffaab", "log": "error", "run": "deploy" }'
        required: false
      comment-id:
        description: "The comment-id of the slash command. Used to update the comment with the status."
        required: false
      # We don't want to push for master since the main cloud build already pushes images
      build_images:
        description: "Build and Push Images. Only relevant when deploying from non-master branches, or when deploying with an OSS Branch. true or false."
        required: true
        default: "true"
      tests_integration:
        description: "Run Integration Tests"
        required: true
        default: "true"
      gsm_integration:
        description: "Run Secrets Management procedure (GSM,GKE)"
        required: false
        default: "false"

  workflow_call:
    inputs:
      env_name:
        type: string
        required: false
        default: "infra-dev"
      oss_branch:
        type: string
        required: false
        default: ""
      oss_version:
        type: string
        required: false
        default: string
      cloud_version:
        type: string
        required: false
        default: string
      run_type:
        type: string
        required: false
        default: "dry"
      json:
        type: string
        required: false
        default: ""
      comment-id:
        type: string
        description: "The comment-id of the slash command. Used to update the comment with the status."
        required: false
      build_images:
        type: boolean
        required: false
        default: false
      tests_integration:
        type: boolean
        required: false
        default: false
      gsm_integration:
        type: boolean
        required: false
        default: false

#
# More information about the deployment process can be found here:
#     https://github.com/airbytehq/airbyte-cloud/wiki/One-Click-Deploy-(Github-Actions)
#

jobs:
  set-oss-and-cloud-version-vars:
    runs-on: ubuntu-latest
    name: "Set OSS & cloud version vars:"
    outputs:
      oss_version: ${{ steps.set-outputs.outputs.oss_version }}
      oss_branch_ref: ${{ steps.set-outputs.outputs.oss_branch_ref }}
      cloud_version: ${{ steps.set-outputs.outputs.cloud_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Checking input params 
        if: ${{ github.event_name == 'workflow_call' }} 
        run: |-
          set -o xtrace

          echo -e "
                          Checking if params were passed via workflow_call:
                          
                          env_name: ${{ github.event.inputs.env_name }}
                          run_type: ${{ github.event.inputs.run_type }}
          "
          
      - name: Set Outputs
        id: set-outputs
        run: |-
          set -o xtrace
          
          #--------------------------------------------------------------------
          # Set oss_version and oss_branch_ref vars based on inputs
          #--------------------------------------------------------------------
          
          # If oss_version input, assume it is an official release with a corresponding tag that should be used as the oss_branch
          if test -n "${{ github.event.inputs.oss_version }}"
          then
            ossVersion="${{ github.event.inputs.oss_version }}"
            ossBranchRef="v${{ github.event.inputs.oss_version }}"
          
          # Else if oss_branch input, set oss_version to the generated oss_branch tag, and set the output oss_branch_ref to the input oss_branch directly 
          elif test -n "${{ github.event.inputs.oss_branch }}"
          then
            ossVersion="${{ needs.generate-oss-branch-tag.outputs.oss_branch_tag }}"
            ossBranchRef="${{ github.event.inputs.oss_branch }}"
          
          # Else, no oss_branch or oss_version input was provided, so use defaults from earlier step
          else
            ossVersion="${{ steps.default-version-vars.outputs.oss_version }}"
            ossBranchRef="${{ steps.default-version-vars.outputs.oss_branch_ref }}"
          fi
          
          echo "::set-output name=oss_version::$ossVersion"
          echo "::set-output name=oss_branch_ref::$ossBranchRef"
          echo "::set-output name=cloud_version::$cloudVersion"
          
          echo "
                     oss_version: $ossVersion
                  oss_branch_ref: $ossBranchRef 
                   cloud_version: $cloudVersion
          "
  parsing-input-params:
    runs-on: ubuntu-latest
    name: Parsing input params
    steps:
      - name: Checkout Airbyte
        uses: actions/checkout@v2
    
      - name: Parsing Inputs and set Variables
        id: input-and-variables
        run: |-
          set -e
          case "${{ github.event.inputs.env_name }}" in
              infra-dev|dev|dev-1|dev-2|dev-3|frontend-dev)
                  GCP_SA_KEY="DEV_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::false";;
              stage)
                  GCP_SA_KEY="STAGE_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::true";;
              prod)
                  GCP_SA_KEY="PROD_GCP_KEY"; echo "::set-output name=helm_atomic_upgrade::true";;
              *)
                  echo "*** Unexpected env_name: ${{ github.event.inputs.env_name }} ***"; exit 1
              esac
          echo "::set-output name=gcp_sa_key::${GCP_SA_KEY}"
          [[ "${{ github.event.inputs.run_type }}" == "dry" ]] && echo "::set-output name=dry_run::true" || echo "::set-output name=dry_run::false"
          
      - name: Helm Chart is being deployed to GKE Cluster and GCP Endpoints Configs are being uppdated
        id: deploy
        uses: ./.github/actions/test-deploy
        with:
          env_name: ${{ github.event.inputs.env_name }}
          oss_version: ${{ needs.set-oss-and-cloud-version-vars.outputs.oss_version }}
          oss_branch_ref: ${{ needs.set-oss-and-cloud-version-vars.outputs.oss_branch_ref }}
          cloud_version: ${{ needs.set-oss-and-cloud-version-vars.outputs.cloud_version }}
          # Due to the limit of 10 input parameters in the workflow, log_level is being removed in favor of oss_branch. This can still be specified in the json input
          # log_level: ${{ github.event.inputs.log_level }}
          run_type: ${{ github.event.inputs.run_type }}
          json: ${{ github.event.inputs.json }}
          build_images: ${{ github.event.inputs.build_images }}
          gcp_sa_key: ${{ steps.input-and-variables.outputs.gcp_sa_key }}
          # dockerhub_token: ${{ secrets.DOCKER_TOKEN }}
          gsm_integration: ${{ github.event.inputs.gsm_integration }}
          # lastpass_token: ${{ secrets.LASTPASS_TOKEN }}
